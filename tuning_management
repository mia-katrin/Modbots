#!/usr/bin/env python3

import json
import argparse
import os
import numpy as np
import re
from localconfig import config
from tqdm import tqdm
import pickle

from square import SquareManager

def check_match(config, filename):
    c = float("0." + file[1:3])
    b = float("0." + file[5:7])

    if c != config.mutation.control:
        print("Control", c, "vs.", config.mutation.control)

    if b != config.mutation.body:
        print("Body", b, "vs.", config.mutation.body)

    mode = get_mode(config)
    brain_type = get_brain_type(config)

    file_descriptors = file[8:-4].split("_")
    if len(file_descriptors) == 3:
        file_descriptors[1] += "_" + file_descriptors.pop(-1)

    if mode != file_descriptors[0]:
        print("Mode", file_descriptors[0], "vs.", mode)

    brain_not_match = False
    if len(file_descriptors) > 1:
        if brain_type != file_descriptors[1]:
            print("Brain", file_descriptors[1], "vs.", brain_type)
    elif brain_type != "":
        print("Brain sine vs.", brain_type)

def refresh_treat_experiment_folder(exp_folder, squareManager):
    for dir in tqdm(os.listdir(exp_folder)):
        run_folder = f"{exp_folder}/{dir}"
        if not os.path.isfile(run_folder):
            squareManager.add_run(run_folder)

def refresh(squareManager):
    base_dir = "remote_experiments"
    for dir in os.listdir(base_dir):
        exp_folder = f"{base_dir}/{dir}"

        refresh_treat_experiment_folder(exp_folder, squareManager)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--nr_runs", "-n", action="store_true", default=False)
    parser.add_argument("--nr_modules", "-nm", action="store_true", default=False)
    parser.add_argument("--collapsed", "-c", action="store_true", default=False)
    parser.add_argument("--individual", "-i", action="store_true", default=False)
    args = parser.parse_args()

    squareManager = SquareManager()

    refresh(squareManager)

    if args.individual:
        if args.collapsed:
            squareManager.plot_all_collapsed_individual()
        else:
            squareManager.plot_all_individual(runs=args.nr_runs, nr_modules=args.nr_modules)
    else:
        if args.collapsed:
            squareManager.plot_all_collapsed()
        else:
            squareManager.plot_all(runs=args.nr_runs, nr_modules=args.nr_modules)
